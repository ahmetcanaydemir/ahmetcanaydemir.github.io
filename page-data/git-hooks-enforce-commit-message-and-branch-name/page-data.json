{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/git-hooks-enforce-commit-message-and-branch-name/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Ahmet Can Aydemir","author":"Ahmet Can Aydemir"}},"markdownRemark":{"id":"722d4d4d-c542-5f2b-8980-fcb0f4553b51","html":"<p><a href=\"/x/\"></a></p>\n<p>If you want to standardize things among your team, you may need to enforce strict rules. Some examples of rules might be for git are:</p>\n<ul>\n<li>Branches must be created as ISSUE-0000/feature-name.</li>\n<li>All commit messages must start as ISSUE-0000 (Jira issue id).</li>\n</ul>\n<p>In this post, I will show you how we can add the two rules I mentioned using git hooks.</p>\n<hr>\n<p>There are multiple <a href=\"https://git-scm.com/docs/githooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">git hooks</a> that work in different stages. We will use two client-side hooks for our rules.</p>\n<ul>\n<li><strong>pre-commit:</strong> This hook is invoked by git-commit, and can be bypassed with the <code class=\"language-text\">--no-verify</code> option. We will use this hook for checking the branch name before committing.</li>\n<li><strong>commit-msg:</strong> This hook is invoked by git-commit and git-merge, and can be bypassed with the <code class=\"language-text\">--no-verify</code> option. It takes a single parameter, the name of the file that holds the proposed commit message. We will use this hook for checking the commit message. And we will modify the commit message if needed.</li>\n</ul>\n<h2 id=\"creating-hooks-folder\" style=\"position:relative;\"><a href=\"#creating-hooks-folder\" aria-label=\"creating hooks folder permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating Hooks Folder</h2>\n<p>Go to your home directory and create a folder named <code class=\"language-text\">hooks</code>. And create hook files.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> ~/hooks\n<span class=\"token builtin class-name\">cd</span> ~/hooks\n\n<span class=\"token function\">touch</span> pre-commit\n<span class=\"token function\">chmod</span> +x pre-commit\n\n<span class=\"token function\">touch</span> commit-msg\n<span class=\"token function\">chmod</span> +x commit-msg</code></pre></div>\n<hr>\n<h2 id=\"restricting-branch-names\" style=\"position:relative;\"><a href=\"#restricting-branch-names\" aria-label=\"restricting branch names permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Restricting Branch Names</h2>\n<p>We will accept branch names as ISSUE-0000/feature-name but we have to consider also other branch names like <code class=\"language-text\">main</code>, <code class=\"language-text\">develop</code>, <code class=\"language-text\">release</code> etc. For this, we can use the following regular expression.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">REGEX_ISSUE_ID</span><span class=\"token operator\">=</span><span class=\"token string\">\"^(ISSUE-[0-9]+\\/([a-zA-Z0-9]|-)+|develop|main|release\"</span></code></pre></div>\n<p>We also need the branch name:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rev-parse --abbrev-ref HEAD</code></pre></div>\n<p>Thatâ€™s it! We have regex and we have branch name. We will check for branch name starts with <code class=\"language-text\">ISSUE-0000/feature-name</code> or <code class=\"language-text\">develop</code> or <code class=\"language-text\">main</code> or <code class=\"language-text\">release</code>. If our check fails we will echo our error message and exit with <code class=\"language-text\">exit code 1</code>.</p>\n<p><code class=\"language-text\">pre-commit</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">REGEX_ISSUE_ID</span><span class=\"token operator\">=</span><span class=\"token string\">\"^(ISSUE-[0-9]+\\/([a-zA-Z0-9]|-)+|develop|main|release\"</span>\n\n<span class=\"token assign-left variable\">ISSUE_ID_IN_BRANCH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">$(</span>git rev-parse --abbrev-ref HEAD<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -o -E <span class=\"token string\">\"<span class=\"token variable\">$REGEX_ISSUE_ID</span>\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -z <span class=\"token string\">\"<span class=\"token variable\">$ISSUE_ID_IN_BRANCH</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"[pre-commit-hook] Your branch name is illegal. Please rename your branch with using following regex: <span class=\"token variable\">$REGEX_ISSUE_ID</span>\"</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<hr>\n<h2 id=\"restricting-commit-messages\" style=\"position:relative;\"><a href=\"#restricting-commit-messages\" aria-label=\"restricting commit messages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Restricting Commit Messages</h2>\n<p>Steps are similar to restricting branch names. But if there is no issue id in the commit message, we will look at the branch name and try to get it from there. If the issue id is also not in the branch name, we will throw an error.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">REGEX_ISSUE_ID</span><span class=\"token operator\">=</span><span class=\"token string\">\"^(ISSUE-[0-9]+|Merge|hotfix)\"</span></code></pre></div>\n<p>Our first argument <code class=\"language-text\">$1</code> gives us the commit-msg file. We can read the commit message with the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span></code></pre></div>\n<p>We have regex and we have to commit message name, and from the last step, we know how to get branch name. We will check for commit message starts with <code class=\"language-text\">ISSUE-0000</code> or <code class=\"language-text\">Merge</code> or <code class=\"language-text\">hotfix</code>.</p>\n<p>If the commit check fails we will check our branch name and parse the issue id and insert to commit message.</p>\n<p>If our check fails again we will echo our error message and exit with <code class=\"language-text\">exit code 1</code>.</p>\n<p><code class=\"language-text\">commit-msg</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">REGEX_ISSUE_ID</span><span class=\"token operator\">=</span><span class=\"token string\">\"^(ISSUE-[0-9]+|Merge|hotfix)\"</span>\n<span class=\"token assign-left variable\">ISSUE_ID_IN_COMMIT</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">$(</span>cat <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -o -E <span class=\"token string\">\"<span class=\"token variable\">$REGEX_ISSUE_ID</span>\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -z <span class=\"token string\">\"<span class=\"token variable\">$ISSUE_ID_IN_COMMIT</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">BRANCH_NAME</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">git</span> symbolic-ref --short HEAD<span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">ISSUE_ID</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$BRANCH_NAME</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -o -E <span class=\"token string\">\"<span class=\"token variable\">$REGEX_ISSUE_ID</span>\"</span><span class=\"token variable\">)</span></span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -z <span class=\"token string\">\"<span class=\"token variable\">$ISSUE_ID</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"[commit-msg-hook] Your commit message is illegal. Please rename your branch with using following regex: <span class=\"token variable\">$REGEX_ISSUE_ID</span>\"</span>\n        <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">fi</span>\n\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$ISSUE_ID</span> | <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span><span class=\"token variable\">)</span></span>\"</span> <span class=\"token operator\">></span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<hr>\n<h2 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>Go to the project folder and run the following command to use your hooks. You need to make this for every project that you want to use hooks.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>your-team-repository<span class=\"token operator\">></span>\n<span class=\"token function\">git</span> config core.hooksPath ~/hooks</code></pre></div>\n<hr>\n<h2 id=\"sharing-with-team-members\" style=\"position:relative;\"><a href=\"#sharing-with-team-members\" aria-label=\"sharing with team members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sharing With Team Members</h2>\n<p>You need to share your <code class=\"language-text\">~/hooks</code> folder. You can share with a git repository or you can send the folder directly to your team.</p>","timeToRead":3,"frontmatter":{"title":"Git Hooks: Enforce Commit Message and Branch Name","date":"December 01, 2021","spoiler":"Branch and commit rules with git hooks"},"fields":{"slug":"/git-hooks-enforce-commit-message-and-branch-name/","langKey":"en"}}},"pageContext":{"slug":"/git-hooks-enforce-commit-message-and-branch-name/","previous":{"fields":{"slug":"/renewed-my-personal-website/","langKey":"en","directoryName":"renewed-my-personal-website","maybeAbsoluteLinks":["/x/"]},"frontmatter":{"title":"I Renewed My Personal Website"}},"next":{"fields":{"slug":"/gitlab-ci-update-mr-with-jira-issue-id/","langKey":"en","directoryName":"gitlab-ci-update-mr-with-jira-issue-id","maybeAbsoluteLinks":["/x/","/git-hooks-enforce-commit-message-and-branch-name/"]},"frontmatter":{"title":"GitLab CI: Update MR with Jira Issue Id"}},"translations":["tr"],"translatedLinks":[]}},
    "staticQueryHashes": ["336482444"]}