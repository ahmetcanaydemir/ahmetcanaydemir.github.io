{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/how-to-use-apache-airflow/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Ahmet Can Aydemir","author":"Ahmet Can Aydemir"}},"markdownRemark":{"id":"d5698bf4-7990-5ebc-90c9-7a2c333bbc18","html":"<p><a href=\"/x/\"></a></p>\n<h2 id=\"what-is-apache-airflow\" style=\"position:relative;\"><a href=\"#what-is-apache-airflow\" aria-label=\"what is apache airflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Apache Airflow</h2>\n<p>Airflow is an orchestration tool that ensures that tasks are running at the right time, in the correct order, and in the right way.</p>\n<h3 id=\"why-you-need-apache-airflow\" style=\"position:relative;\"><a href=\"#why-you-need-apache-airflow\" aria-label=\"why you need apache airflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why You Need Apache Airflow</h3>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9803a05zin2dg81g3gs.png\" alt=\"ETL\"></p>\n<p>Imagine you have a data pipeline like the one above.</p>\n<ul>\n<li>What if an error occurs in any of these stages? There may be an error in the API from which you are pulling the data, there may be an error while processing the data, or there may be an error while saving to the DB.</li>\n<li>If you have a lot of data pipelines like this, it will eventually become overwhelming.</li>\n</ul>\n<p>Roughly, as in the example above, taking the data from a source and saving it to the target after certain operations are called ETL (Extract Transform Load). Such transactions can be managed in an advanced way by using Airflow.</p>\n<h3 id=\"benefits-of-apache-airflow\" style=\"position:relative;\"><a href=\"#benefits-of-apache-airflow\" aria-label=\"benefits of apache airflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Benefits of Apache Airflow</h3>\n<p><strong>Dynamic:</strong> What can be done with Python also can be done with Airflow. As a result, Airflow provides tremendous dynamics when creating our tasks.</p>\n<p><strong>Scalable:</strong> As many tasks as desired can be easily run in parallel.</p>\n<p><strong>User Interface:</strong> Airflow has a useful UI. Errors that occur in data pipelines and where they occur can be easily observed. Problematic tasks can be restarted etc.</p>\n<p><strong>Extensible:</strong> No need to wait for Airflow update when a new tool comes out. You can write your plugins and integrate them easily.</p>\n<h3 id=\"apache-airflows-core-components\" style=\"position:relative;\"><a href=\"#apache-airflows-core-components\" aria-label=\"apache airflows core components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apache Airflow’s Core Components</h3>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqxxkmass3ie637tzjvd.png\" alt=\"Airflow&#x27;s Core Components\"></p>\n<p><strong>Web Server:</strong> A Flask server that serves the UI.</p>\n<p><strong>Scheduler:</strong> The daemon that schedules the workflows. It is the most important component of Airflow.</p>\n<p><strong>Metastore:</strong> Database where metadata is stored.</p>\n<p><strong>Executor:</strong> Class that defines how tasks should work.</p>\n<p><strong>Worker:</strong> The process or sub-process executing the task.</p>\n<h3 id=\"dag-directed-acyclic-graph\" style=\"position:relative;\"><a href=\"#dag-directed-acyclic-graph\" aria-label=\"dag directed acyclic graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DAG (Directed Acyclic Graph)</h3>\n<p>A DAG (Directed Acyclic Graph) is the core concept of Airflow, collecting Tasks together, organized with dependencies and relationships to say how they should run.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mldbmor2s91ffb7ho5z5.png\" alt=\"DAG\"></p>\n<ul>\n<li>Example DAG above defines four Tasks - A, B, C, and D - and dictates the order in which they have to run, and which tasks depend on what others. It will also say how often to run the DAG - maybe “every 5 minutes starting tomorrow”, or “every day since January 1st, 2020”.</li>\n<li>The DAG itself doesn’t care about <em>what</em> is happening inside the tasks; it is merely concerned with <em>how</em> to execute them - the order to run them in, how many times to retry them, if they have timeouts, and so on.</li>\n</ul>\n<p><strong>Basic DAG example</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> DAG<span class=\"token punctuation\">(</span><span class=\"token string\">\"my_dag_name\"</span><span class=\"token punctuation\">,</span>\n\t\tstart_date<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    schedule_interval<span class=\"token operator\">=</span><span class=\"token string\">\"@daily\"</span><span class=\"token punctuation\">,</span>\n\t\tcatchup<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> dag<span class=\"token punctuation\">:</span>\n    op <span class=\"token operator\">=</span> DummyOperator<span class=\"token punctuation\">(</span>task_id<span class=\"token operator\">=</span><span class=\"token string\">\"task\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"operators\" style=\"position:relative;\"><a href=\"#operators\" aria-label=\"operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operators</h3>\n<p>Operators are wrappers that cover the task. By default, there are many different types of operators and can be viewed at <a href=\"https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/operators/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this link</a>. In addition, <a href=\"https://airflow.apache.org/docs/apache-airflow-providers/operators-and-hooks-ref/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">much more</a> can be added as needed.</p>\n<ol>\n<li><strong>Action Operators:</strong> Operators which executes functions or commands eg. <code class=\"language-text\">bash scripts</code>, <code class=\"language-text\">python code</code></li>\n<li><strong>Transfer Operators:</strong> Operators for moving data from source to destination eg. <code class=\"language-text\">ElasticSearch to Mysql</code></li>\n<li><strong>Sensor Operators:</strong> Operators which wait for something to happen before moving on to another task, eg. checking the file in the directory and continuing to the other task after that.</li>\n</ol>\n<h3 id=\"what-isnt-airflow\" style=\"position:relative;\"><a href=\"#what-isnt-airflow\" aria-label=\"what isnt airflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What Isn’t Airflow?</h3>\n<p>Airflow is not a data streaming solution or data processing framework. If you need to process data every second, instead of using Airflow, Spark or Flink would be a better solution. If terabytes of data are being processed, it is recommended to run the Spark job with the operator in Airflow.</p>\n<h2 id=\"apache-airflow-setup\" style=\"position:relative;\"><a href=\"#apache-airflow-setup\" aria-label=\"apache airflow setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apache Airflow Setup</h2>\n<p>Although Airflow can be installed with Docker, Kubernetes or different methods, in this article, we will install it locally.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Airflow needs a home. `~/airflow` is the default, but you can put it</span>\n<span class=\"token comment\"># somewhere else if you prefer (optional)</span>\nexport AIRFLOW_HOME<span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token operator\">/</span>airflow\n\n<span class=\"token comment\"># Install Airflow using the constraints file. For this example, we will use Python 3.6 and Airflow 2.2.4</span>\npip install <span class=\"token string\">\"apache-airflow==${AIRFLOW_VERSION}\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span>constraint <span class=\"token string\">\"https://raw.githubusercontent.com/apache/airflow/constraints-2.2.4/constraints-3.6.txt\"</span>\n\n<span class=\"token comment\"># The Standalone command will initialize the database, make a user,</span>\n<span class=\"token comment\"># and start all components for you.</span>\nairflow standalone\n\n<span class=\"token comment\"># Visit localhost:8080 in the browser and use the admin account details</span>\n<span class=\"token comment\"># shown on the terminal to login.</span>\n<span class=\"token comment\"># Enable the example_bash_operator dag on the home page</span></code></pre></div>\n<h2 id=\"first-pipeline-with-apache-airflow\" style=\"position:relative;\"><a href=\"#first-pipeline-with-apache-airflow\" aria-label=\"first pipeline with apache airflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>First Pipeline with Apache Airflow</h2>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4of3ly2k0c3zaqi00o9.png\" alt=\"Pipeline\"></p>\n<p>For example, let’s create a data pipeline like the one in the figure using Airflow. For this, let’s create a new python file in <code class=\"language-text\">~/airflow/dags</code> directory eg: <code class=\"language-text\">user_processing.py</code></p>\n<h3 id=\"1-importing-modules\" style=\"position:relative;\"><a href=\"#1-importing-modules\" aria-label=\"1 importing modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Importing Modules</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> pandas <span class=\"token keyword\">import</span> json_normalize\n\n<span class=\"token comment\"># DAG object; We will need this to create DAG</span>\n<span class=\"token keyword\">from</span> airflow <span class=\"token keyword\">import</span> DAG\n\n<span class=\"token comment\"># Operators</span>\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>operators<span class=\"token punctuation\">.</span>bash <span class=\"token keyword\">import</span> BashOperator\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>operators<span class=\"token punctuation\">.</span>python <span class=\"token keyword\">import</span> PythonOperator\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>providers<span class=\"token punctuation\">.</span>sqlite<span class=\"token punctuation\">.</span>operators<span class=\"token punctuation\">.</span>sqlite <span class=\"token keyword\">import</span> SqliteOperator\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>providers<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>operators<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> SimpleHttpOperator\n\n<span class=\"token comment\"># Sensors</span>\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>providers<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>sensors<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpSensor</code></pre></div>\n<h3 id=\"2-instantiate-a-dag\" style=\"position:relative;\"><a href=\"#2-instantiate-a-dag\" aria-label=\"2 instantiate a dag permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Instantiate a DAG</h3>\n<p>We’ll need a DAG object to nest our tasks into. Here we pass a string that defines the <code class=\"language-text\">dag_id</code>, which serves as a unique identifier for your DAG. We also pass a default argument dictionary and define a <code class=\"language-text\">schedule_interval</code> of 1 day for the DAG.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">default_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'start_date'</span><span class=\"token punctuation\">:</span> datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">with</span> DAG<span class=\"token punctuation\">(</span><span class=\"token string\">'user_processing'</span><span class=\"token punctuation\">,</span> schedule_interval<span class=\"token operator\">=</span><span class=\"token string\">'@daily'</span><span class=\"token punctuation\">,</span>\n        default_args<span class=\"token operator\">=</span>default_args<span class=\"token punctuation\">,</span>\n        catchup<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> dag<span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># Define tasks/operators</span></code></pre></div>\n<h3 id=\"3-creating-the-sqlite-table\" style=\"position:relative;\"><a href=\"#3-creating-the-sqlite-table\" aria-label=\"3 creating the sqlite table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Creating the SQLite Table</h3>\n<p>We can use <code class=\"language-text\">SqliteOperator</code> for this task. But <code class=\"language-text\">SqliteOperator</code> will need a parameter named <code class=\"language-text\">conn_id</code>, so first let’s create a connection for SQLite DB.</p>\n<p>In Airflow, connections are kept in the metadata database. We will need to do the same for the <code class=\"language-text\">HTTPOperator</code>.</p>\n<p>We can use UI to create a connection</p>\n<ol>\n<li>Go to <a href=\"http://localhost:8080/connection/add\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:8080/connection/add</a> (<strong>Admin / Connections / +</strong>)</li>\n<li>Type <code class=\"language-text\">Conn Id</code> field a unique name e.g.: <code class=\"language-text\">db_sqlite</code></li>\n<li>Select <code class=\"language-text\">Conn Type</code> field as <code class=\"language-text\">SQLite</code></li>\n<li>In the <code class=\"language-text\">Host</code> field, type the path to the SQLite database file. In this example, we can use Airflow’s metadata database instead of creating a new SQLite database file. <code class=\"language-text\">/home/airflow/airflow.db</code></li>\n<li>Save</li>\n</ol>\n<p>After this process, we can create the operator. Each operator must have a unique <code class=\"language-text\">task_id</code>. SqliteOperator also has <code class=\"language-text\">sqlite_conn_id</code> and <code class=\"language-text\">sql</code> parameters. We will use the <code class=\"language-text\">db_sqlite</code> as the sqlite_conn_id (see step 2).</p>\n<p>In SQL code; if the <code class=\"language-text\">users</code> table does not already exist; It creates a <code class=\"language-text\">users</code> table with fields <code class=\"language-text\">firstname</code>, <code class=\"language-text\">lastname</code>, <code class=\"language-text\">country</code>, <code class=\"language-text\">username</code>, <code class=\"language-text\">password</code> and <code class=\"language-text\">email</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"> creating_table <span class=\"token operator\">=</span> SqliteOperator<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">'creating_table'</span><span class=\"token punctuation\">,</span>\n        sqlite_conn_id<span class=\"token operator\">=</span><span class=\"token string\">'db_sqlite'</span><span class=\"token punctuation\">,</span>\n        sql<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">'''\n            CREATE TABLE IF NOT EXISTS users (\n                firstname TEXT NOT NULL,\n                lastname TEXT NOT NULL,\n                country TEXT NOT NULL,\n                username TEXT NOT NULL,\n                password TEXT NOT NULL,\n                email TEXT NOT NULL PRIMARY KEY\n            );\n        '''</span> \n    <span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"4-verify-api\" style=\"position:relative;\"><a href=\"#4-verify-api\" aria-label=\"4 verify api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Verify API</h3>\n<p>We can add a sensor to check if there is a problem with the API by making an HTTP request. <code class=\"language-text\">HttpSensor</code> will be useful for this, but <code class=\"language-text\">HttpSensor</code> needs <code class=\"language-text\">http_conn_id</code> parameter. So we have to create a new connection as we did in the previous step. Unlike before, this time we will create a connection with <code class=\"language-text\">HTTP</code> type, not an <code class=\"language-text\">SQLite</code> type.</p>\n<p>We can use UI to create a connection</p>\n<ol>\n<li>Go to <a href=\"http://localhost:8080/connection/add\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:8080/connection/add</a> (<strong>Admin / Connections / +</strong>)</li>\n<li>Type <code class=\"language-text\">Conn Id</code> field a unique name e.g.: <code class=\"language-text\">user_api</code></li>\n<li>Select <code class=\"language-text\">Conn Type</code> field as <code class=\"language-text\">HTTP</code></li>\n<li>In the <code class=\"language-text\">Host</code> field, enter the address of the API that brings random users. eg. <a href=\"https://randomuser.me/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://randomuser.me/</a></li>\n<li>Save</li>\n</ol>\n<p>Now we can create the sensor. Since the API we use works at <code class=\"language-text\">[https://randomuser.me/api/](https://randomuser.me/api)</code>, we used <code class=\"language-text\">api/</code> in the endpoint parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">is_api_available <span class=\"token operator\">=</span> HttpSensor<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">'is_api_available'</span><span class=\"token punctuation\">,</span>\n        http_conn_id<span class=\"token operator\">=</span><span class=\"token string\">'user_api'</span><span class=\"token punctuation\">,</span>\n        endpoint<span class=\"token operator\">=</span><span class=\"token string\">'api/'</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"5-retrieve-random-users-from-api\" style=\"position:relative;\"><a href=\"#5-retrieve-random-users-from-api\" aria-label=\"5 retrieve random users from api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Retrieve Random Users from API</h3>\n<p>With using <code class=\"language-text\">SimpleHttpOperator</code> we send a <code class=\"language-text\">GET</code> HTTP request to the <code class=\"language-text\">user_api</code> connection we created before. With <code class=\"language-text\">response_filter</code> we convert the JSON string in the <code class=\"language-text\">response.text</code> field into a python object.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"> extracting_user <span class=\"token operator\">=</span> SimpleHttpOperator<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">'extracting_user'</span><span class=\"token punctuation\">,</span>\n        http_conn_id<span class=\"token operator\">=</span><span class=\"token string\">'user_api'</span><span class=\"token punctuation\">,</span>\n        endpoint<span class=\"token operator\">=</span><span class=\"token string\">'api/'</span><span class=\"token punctuation\">,</span>\n        method<span class=\"token operator\">=</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n        response_filter<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> response<span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        log_response<span class=\"token operator\">=</span><span class=\"token boolean\">True</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"5-processing-the-api-result\" style=\"position:relative;\"><a href=\"#5-processing-the-api-result\" aria-label=\"5 processing the api result permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Processing the API Result</h3>\n<p>With using <code class=\"language-text\">PythonOperator</code>, we will keep only the desired fields of the python object that we obtained in step 5. And we will save the result as csv file.</p>\n<p>Any python function can be run directly with the <code class=\"language-text\">python_callable</code> parameter.</p>\n<p>The important part here is how we will get the response from the previous section. For this, we can send the <code class=\"language-text\">task instance (ti)</code> object as a parameter to the python function and get the results of the <code class=\"language-text\">task_ids</code> with <code class=\"language-text\">users = ti.xcom_pull(task_ids=['extracting_user'])</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">processing_user <span class=\"token operator\">=</span> PythonOperator<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">'processing_user'</span><span class=\"token punctuation\">,</span>\n        python_callable<span class=\"token operator\">=</span>_processing_user\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Somewhere outside the scope of DAG</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">_processing_user</span><span class=\"token punctuation\">(</span>ti<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    users <span class=\"token operator\">=</span> ti<span class=\"token punctuation\">.</span>xcom_pull<span class=\"token punctuation\">(</span>task_ids<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'extracting_user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">'results'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> users<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'User is empty'</span><span class=\"token punctuation\">)</span>\n    user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'results'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    processed_user <span class=\"token operator\">=</span> json_normalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'firstname'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'lastname'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'last'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'country'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">[</span><span class=\"token string\">'location'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">[</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">[</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'email'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    processed_user<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'/tmp/processed_user.csv'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> header<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"6-saving-processed-users-to-sqlite-db\" style=\"position:relative;\"><a href=\"#6-saving-processed-users-to-sqlite-db\" aria-label=\"6 saving processed users to sqlite db permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Saving Processed Users to SQLite DB</h3>\n<p>We can use <code class=\"language-text\">BashOperator</code> for trying new operators. <code class=\"language-text\">BashOperator</code> allows us to run bash commands.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">storing_user <span class=\"token operator\">=</span> BashOperator<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">'storing_user'</span><span class=\"token punctuation\">,</span>\n        bash_command<span class=\"token operator\">=</span><span class=\"token string\">'echo -e \".separator \",\"\\n.import /tmp/processed_user.csv users\" | sqlite3 /home/airflow/airflow/airflow.db'</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"7-relationship-between-tasks\" style=\"position:relative;\"><a href=\"#7-relationship-between-tasks\" aria-label=\"7 relationship between tasks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Relationship Between Tasks</h3>\n<p>Simply, the direction of the tasks and their connection with each other can be defined as follows.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Somewhere outside the scope of DAG</span>\ncreating_table <span class=\"token operator\">>></span> is_api_available <span class=\"token operator\">>></span> extracting_user <span class=\"token operator\">>></span> processing_user <span class=\"token operator\">>></span> storing_user</code></pre></div>\n<h3 id=\"final-dag-file\" style=\"position:relative;\"><a href=\"#final-dag-file\" aria-label=\"final dag file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final DAG File</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> pandas <span class=\"token keyword\">import</span> json_normalize\n\n<span class=\"token keyword\">from</span> airflow <span class=\"token keyword\">import</span> DAG\n\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>operators<span class=\"token punctuation\">.</span>bash <span class=\"token keyword\">import</span> BashOperator\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>operators<span class=\"token punctuation\">.</span>python <span class=\"token keyword\">import</span> PythonOperator\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>providers<span class=\"token punctuation\">.</span>sqlite<span class=\"token punctuation\">.</span>operators<span class=\"token punctuation\">.</span>sqlite <span class=\"token keyword\">import</span> SqliteOperator\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>providers<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>operators<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> SimpleHttpOperator\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>providers<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>sensors<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpSensor\n\ndefault_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'start_date'</span><span class=\"token punctuation\">:</span> datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_processing_user</span><span class=\"token punctuation\">(</span>ti<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    users <span class=\"token operator\">=</span> ti<span class=\"token punctuation\">.</span>xcom_pull<span class=\"token punctuation\">(</span>task_ids<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'extracting_user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">'results'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> users<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'User is empty'</span><span class=\"token punctuation\">)</span>\n    user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'results'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    processed_user <span class=\"token operator\">=</span> json_normalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'firstname'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'lastname'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'last'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'country'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">[</span><span class=\"token string\">'location'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">[</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">[</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'email'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    processed_user<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'/tmp/processed_user.csv'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> header<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n    \n\n<span class=\"token keyword\">with</span> DAG<span class=\"token punctuation\">(</span><span class=\"token string\">'user_processing'</span><span class=\"token punctuation\">,</span> schedule_interval<span class=\"token operator\">=</span><span class=\"token string\">'@daily'</span><span class=\"token punctuation\">,</span>\n        default_args<span class=\"token operator\">=</span>default_args<span class=\"token punctuation\">,</span>\n        catchup<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> dag<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Define tasks/operators</span>\n        \n    creating_table <span class=\"token operator\">=</span> SqliteOperator<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">'creating_table'</span><span class=\"token punctuation\">,</span>\n        sqlite_conn_id<span class=\"token operator\">=</span><span class=\"token string\">'db_sqlite'</span><span class=\"token punctuation\">,</span>\n        sql<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">'''\n            CREATE TABLE IF NOT EXISTS users (\n                firstname TEXT NOT NULL,\n                lastname TEXT NOT NULL,\n                country TEXT NOT NULL,\n                username TEXT NOT NULL,\n                password TEXT NOT NULL,\n                email TEXT NOT NULL PRIMARY KEY\n            );\n        '''</span> \n    <span class=\"token punctuation\">)</span>\n    \n    is_api_available <span class=\"token operator\">=</span> HttpSensor<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">'is_api_available'</span><span class=\"token punctuation\">,</span>\n        http_conn_id<span class=\"token operator\">=</span><span class=\"token string\">'user_api'</span><span class=\"token punctuation\">,</span>\n        endpoint<span class=\"token operator\">=</span><span class=\"token string\">'api/'</span>\n    <span class=\"token punctuation\">)</span>\n    \n    extracting_user <span class=\"token operator\">=</span> SimpleHttpOperator<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">'extracting_user'</span><span class=\"token punctuation\">,</span>\n        http_conn_id<span class=\"token operator\">=</span><span class=\"token string\">'user_api'</span><span class=\"token punctuation\">,</span>\n        endpoint<span class=\"token operator\">=</span><span class=\"token string\">'api/'</span><span class=\"token punctuation\">,</span>\n        method<span class=\"token operator\">=</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n        response_filter<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> response<span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        log_response<span class=\"token operator\">=</span><span class=\"token boolean\">True</span>\n    <span class=\"token punctuation\">)</span>\n    \n    processing_user <span class=\"token operator\">=</span> PythonOperator<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">'processing_user'</span><span class=\"token punctuation\">,</span>\n        python_callable<span class=\"token operator\">=</span>_processing_user\n    <span class=\"token punctuation\">)</span>\n    \n    storing_user <span class=\"token operator\">=</span> BashOperator<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">'storing_user'</span><span class=\"token punctuation\">,</span>\n        bash_command<span class=\"token operator\">=</span><span class=\"token string\">'echo -e \".separator \",\"\\n.import /tmp/processed_user.csv users\" | sqlite3 /home/airflow/airflow/airflow.db'</span>\n    <span class=\"token punctuation\">)</span>\n    \ncreating_table <span class=\"token operator\">>></span> is_api_available <span class=\"token operator\">>></span> extracting_user <span class=\"token operator\">>></span> processing_user <span class=\"token operator\">>></span> storing_user</code></pre></div>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>To understand the concept, we have defined a simple and parallelism-free data pipeline. Much more complex, parallel tasks also can be created using Airflow. Thank you for reading!</p>\n<h2 id=\"screenshots\" style=\"position:relative;\"><a href=\"#screenshots\" aria-label=\"screenshots permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Screenshots</h2>\n<details>\n<summary markdown=\"span\">Show Screenshots</summary>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3a0r96acrkak6cfceck.png\" alt=\"Graph View\"></p>\n<hr>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gc2uehcap4a2azidlppc.png\" alt=\"Tree View\"></p>\n<hr>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j68phdyzzbll0wfx7q6q.png\" alt=\"Gantt\"></p>\n<hr>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vjunmrg6fd6gq0gg5wi.png\" alt=\"Log\"></p>\n<hr>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6rb1hz3e4qs1pmdpc53.png\" alt=\"Homepage\"></p>\n</details>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://www.udemy.com/course/the-complete-hands-on-course-to-master-apache-airflow/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Complete Hands-On Introduction to Apache Airflow by Marc Lamberti</a></li>\n<li><a href=\"https://airflow.apache.org/docs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apache Airflow Docs</a></li>\n</ul>","timeToRead":10,"frontmatter":{"title":"How to Use Apache Airflow","date":"March 16, 2022","spoiler":"Basic introduction to Apache Airflow."},"fields":{"slug":"/how-to-use-apache-airflow/","langKey":"en"}}},"pageContext":{"slug":"/how-to-use-apache-airflow/","previous":{"fields":{"slug":"/krakend-monitoring-with-grafana/","langKey":"en","directoryName":"krakend-monitoring-with-grafana","maybeAbsoluteLinks":["/x/"]},"frontmatter":{"title":"KrakenD Monitoring with Grafana"}},"next":null,"translations":["tr"],"translatedLinks":[]}},
    "staticQueryHashes": ["336482444"]}