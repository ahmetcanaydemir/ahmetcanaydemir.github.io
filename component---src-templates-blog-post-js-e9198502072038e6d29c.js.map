{"version":3,"sources":["webpack:///./i18n.js","webpack:///./src/utils/whitelist.js","webpack:///./src/utils/i18n.js","webpack:///./src/templates/blog-post.js"],"names":["exports","supportedLanguages","en","tr","codeToLanguage","code","replace","systemFont","Translations","render","this","props","translations","lang","languageLink","editUrl","hasTurkishTranlation","filter","indexOf","className","Panel","style","fontFamily","length","display","to","marginTop","rhythm","href","target","rel","React","Component","BlogPostTemplate","post","data","markdownRemark","siteTitle","get","pageContext","previous","next","slug","translatedLinks","fields","langKey","html","matches","match","forEach","url","whitelist","replaceAnchorLinksByLanguage","link","translatedLink","RegExp","slice","sort","a","b","loadFontsForCode","rawSlug","targetLang","createLanguageLink","enSlug","encodeURIComponent","Layout","location","title","SEO","frontmatter","description","spoiler","color","scale","marginBottom","formatPostDate","date","formatReadingTime","timeToRead","dangerouslySetInnerHTML","__html","margin","Bio","flexWrap","justifyContent","listStyle","padding","marginRight"],"mappings":"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","file":"component---src-templates-blog-post-js-e9198502072038e6d29c.js","sourcesContent":["// Please keep keys lowercase!\nexports.supportedLanguages = {\n  en: 'English',\n  tr: 'Türkçe',\n};\n","// Please keep keys lowercase!\nexport default {\n  'https://reactjs.org': {\n    'pt-br': 'https://pt-br.reactjs.org',\n    // other languages...\n  },\n  // other links...\n};\n","import { supportedLanguages } from './../../i18n';\nimport whitelist from './whitelist';\n\n// This is kind of a mess for some languages.\n// Try to be as short as possible.\n// Make sure you use a real code (e.g. \"ja\", not \"jp\").\n// Some resources:\n// http://www.rfc-editor.org/rfc/bcp/bcp47.txt\n// https://www.w3.org/International/articles/language-tags/\n// https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\n// https://discuss.httparchive.org/t/what-are-the-invalid-uses-of-the-lang-attribute/1022\n\nexport const codeToLanguage = code =>\n  supportedLanguages[code].replace(/ /g, ' ' /* nbsp */);\n\nexport const loadFontsForCode = code => {\n  switch (code) {\n    case 'tr':\n      import('../fonts/fonts-shared.latin-ext.css');\n      import('../fonts/fonts-post.latin-ext.css');\n      break;\n    default:\n      break;\n  }\n};\n\n// TODO: the curried signature is weird.\nexport const createLanguageLink = (slug, lang) => {\n  const rawSlug = slug.replace(`${lang}/`, '');\n\n  return targetLang =>\n    targetLang === 'en' ? rawSlug : `${targetLang}${rawSlug}`;\n};\n\nexport const replaceAnchorLinksByLanguage = (html, code) => {\n  // Match any link using https://regexr.com/4airl\n  const matches = html.match(/https?:\\/\\/(www)?[^\\/\\s)\"?]+/gm);\n\n  // Return same html if no matches were found\n  // or code isn't supported\n  if (!matches || !supportedLanguages[code]) {\n    return html;\n  }\n\n  matches.forEach(url => {\n    // Replace to locale url if and only if exists in whitelist\n    // and has code registered\n    if (whitelist[url] && whitelist[url][code]) {\n      html = html.replace(url, whitelist[url][code]);\n    }\n  });\n\n  return html;\n};\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport get from 'lodash/get';\n\nimport '../fonts/fonts-post.css';\nimport Bio from '../components/Bio';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport Panel from '../components/Panel';\nimport { formatPostDate, formatReadingTime } from '../utils/helpers';\nimport { rhythm, scale } from '../utils/typography';\nimport {\n  codeToLanguage,\n  createLanguageLink,\n  loadFontsForCode,\n  replaceAnchorLinksByLanguage,\n} from '../utils/i18n';\n\nconst GITHUB_USERNAME = 'ahmetcanaydemir';\nconst GITHUB_REPO_NAME = 'ahmetcanaydemir.github.io';\nconst systemFont = `system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\",\n    \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\n    \"Droid Sans\", \"Helvetica Neue\", sans-serif`;\n\nclass Translations extends React.Component {\n  render() {\n    let { translations, lang, languageLink, editUrl } = this.props;\n\n    let readerTranslations = translations.filter(lang => lang !== 'tr');\n    let hasTurkishTranlation = translations.indexOf('tr') !== -1;\n\n    return (\n      <div className=\"translations\">\n        <Panel style={{ fontFamily: systemFont }}>\n          {translations.length > 0 && (\n            <span>\n              {hasTurkishTranlation && (\n                <span style={{ display: 'block' }}>\n                  Written in:{' '}\n                  {'en' === lang ? (\n                    <b>{codeToLanguage('en')}</b>\n                  ) : (\n                    <Link to={languageLink('en')}>English</Link>\n                  )}\n                  {' • '}\n                  {'tr' === lang ? (\n                    <b>Türkçe</b>\n                  ) : (\n                    <Link to={`/${languageLink('tr')}`}>Türkçe</Link>\n                  )}\n                </span>\n              )}\n            </span>\n          )}\n          {lang !== 'en' && (\n            <div style={{ marginTop: rhythm(1 / 3) }}>\n              {lang !== 'tr' && (\n                <>\n                  <Link to={languageLink('en')}>Read the original</Link>\n                  {' • '}\n                  <a href={editUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                    Improve this translation\n                  </a>\n                  {' • '}\n                </>\n              )}\n              <Link to={`/${lang}`}>Tüm Türkçe gönderileri göster</Link>{' '}\n            </div>\n          )}\n        </Panel>\n      </div>\n    );\n  }\n}\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark;\n    const siteTitle = get(this.props, 'data.site.siteMetadata.title');\n    let {\n      previous,\n      next,\n      slug,\n      translations,\n      translatedLinks,\n    } = this.props.pageContext;\n    const lang = post.fields.langKey;\n\n    // Replace original links with translated when available.\n    let html = post.html;\n\n    // Replace original anchor links by lang when available in whitelist\n    // see utils/whitelist.js\n    html = replaceAnchorLinksByLanguage(html, lang);\n\n    translatedLinks.forEach(link => {\n      // jeez\n      function escapeRegExp(str) {\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n      }\n      let translatedLink = '/' + lang + link;\n      html = html.replace(\n        new RegExp('\"' + escapeRegExp(link) + '\"', 'g'),\n        '\"' + translatedLink + '\"'\n      );\n    });\n\n    translations = translations.slice();\n    translations.sort((a, b) => {\n      return codeToLanguage(a) < codeToLanguage(b) ? -1 : 1;\n    });\n\n    loadFontsForCode(lang);\n    // TODO: this curried function is annoying\n    const languageLink = createLanguageLink(slug, lang);\n    const enSlug = languageLink('en');\n    const editUrl = `https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO_NAME}/edit/master/src/pages/${enSlug.slice(\n      1,\n      enSlug.length - 1\n    )}/index${lang === 'en' ? '' : '.' + lang}.md`;\n    const discussUrl = `https://mobile.twitter.com/search?q=${encodeURIComponent(\n      `https://ahmetcanaydemir.com${enSlug}`\n    )}`;\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          lang={lang}\n          title={post.frontmatter.title}\n          description={post.frontmatter.spoiler}\n          slug={post.fields.slug}\n        />\n        <main>\n          <article>\n            <header>\n              <h1 style={{ color: 'var(--textTitle)' }}>\n                {post.frontmatter.title}\n              </h1>\n              <p\n                style={{\n                  ...scale(-1 / 5),\n                  display: 'block',\n                  marginBottom: rhythm(1),\n                  marginTop: rhythm(-4 / 5),\n                }}\n              >\n                {formatPostDate(post.frontmatter.date, lang)}\n                {` • ${formatReadingTime(post.timeToRead)}`}\n              </p>\n              {translations.length > 0 && (\n                <Translations\n                  translations={translations}\n                  editUrl={editUrl}\n                  languageLink={languageLink}\n                  lang={lang}\n                />\n              )}\n            </header>\n            <div dangerouslySetInnerHTML={{ __html: html }} />\n            <footer></footer>\n          </article>\n        </main>\n        <aside>\n          <div\n            style={{\n              margin: '90px 0 40px 0',\n              fontFamily: systemFont,\n            }}\n          ></div>\n\n          <Bio />\n          <nav>\n            <ul\n              style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                justifyContent: 'space-between',\n                listStyle: 'none',\n                padding: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link\n                    to={previous.fields.slug}\n                    rel=\"prev\"\n                    style={{ marginRight: 20 }}\n                  >\n                    ← {previous.frontmatter.title}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link to={next.fields.slug} rel=\"next\">\n                    {next.frontmatter.title} →\n                  </Link>\n                )}\n              </li>\n            </ul>\n          </nav>\n        </aside>\n      </Layout>\n    );\n  }\n}\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      timeToRead\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        spoiler\n      }\n      fields {\n        slug\n        langKey\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}